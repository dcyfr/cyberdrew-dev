# Copilot Configuration for cyberdrew.dev

context:
  description: |
    cyberdrew.dev is a modern, accessible, and secure blog and UI component platform built with React, TypeScript, Vite, Tailwind CSS, and shadcn-ui.
    The codebase emphasizes strict TypeScript, accessibility (WCAG), security, performance, and maintainability.
    Key features include a Markdown-powered blog, 40+ reusable UI components, custom hooks, SEO, and Vercel deployment.
    Consult the docs in /docs for architecture, performance budgets, and codebase map.
  docs:
    - path: docs/index.md
      purpose: Docs hub and table of contents; start here for context.
    - path: docs/codebase-map.md
      purpose: High-signal map of key files and directories.
    - path: docs/architecture.md
      purpose: Architectural decisions, routing, transitions, blog renderer.
    - path: docs/performance.md
      purpose: Performance targets, budgets, analysis tools.
    - path: docs/ai-assistants.md
      purpose: Rules for Copilot/assistants (imports, animations, blog rendering).
    - path: docs/agents.md
      purpose: Contribution workflow for agentic tools.
    - path: docs/content.md
      purpose: Content system and SEO.
    - path: SECURITY.md
      purpose: Security policy and practices.

training_guidelines:
  - Use strict TypeScript typing; never use `any`.
  - Prefer functional React components with hooks.
  - Ensure all UI components are accessible and follow WCAG guidelines.
  - Use React.memo, useCallback, and useMemo for performance where appropriate.
  - Organize code by feature: UI components in `src/components/ui/`, site components in `src/components/`, hooks in `src/hooks/`, utilities in `src/lib/`, content in `src/content/`.
  - Implement proper error handling and input validation.
  - Use ESLint and Prettier for linting and formatting.
  - Keep bundle sizes within CI budgets; prefer code-splitting and lazy-loading for heavy UI.
  - Document complex logic with JSDoc comments.
  - Never commit secrets or sensitive data to version control.
  - Follow git best practices: descriptive commits, feature branches, squash merges, and reference issues.
  - Update documentation alongside code changes.
  - Prefer CSS-based transitions on initial routes; do not add framer-motion to initial route bundles.
  - For syntax highlighting, import from `highlight.js/lib/*` only; avoid full library; rely on `src/lib/blog-render.ts`.
  - When in doubt, read the docs listed above for authoritative project context.

examples:
  - |
    // Accessible button component example
    import { ButtonHTMLAttributes } from "react";

    interface AccessibleButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
      label: string;
    }

    export function AccessibleButton({ label, ...props }: AccessibleButtonProps) {
      return (
        <button {...props} aria-label={label}>
          {label}
        </button>
      );
    }
  - |
    // Custom React hook example
    import { useState, useEffect } from "react";

    export function useIsMobile(): boolean {
      const [isMobile, setIsMobile] = useState(false);
      useEffect(() => {
        const checkMobile = () => setIsMobile(window.innerWidth < 768);
        checkMobile();
        window.addEventListener("resize", checkMobile);
        return () => window.removeEventListener("resize", checkMobile);
      }, []);
      return isMobile;
    }
